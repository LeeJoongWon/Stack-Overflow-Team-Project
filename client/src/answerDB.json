{
    "answer": [
        {
            "id": 1,
            "user_id": 1,
            "questions_id": 1,
            "votes": 1,
            "content": "I am building an UMD library that is meant to be used only in browsers. However, it has a dependency on another UMD library/module/bundle .js file which contains <orange>require&nbsp</orange>statements <blue>for&nbsp</blue>nodejs modules. The statements aren't run always, but only <blue>if&nbsp</blue>that sub-library detects it's running in NodeJS. For context, the required nodejs modules are os, http and https but they are all required dynamically.<br><br>My rollup.config.js is already using the @rollup/plugin-node-resolve, @rollup/plugin-commonjs and @rollup/plugin-typescript. But when building it triggers some warnings.<br><br><code>(<blue>function&nbsp</blue>(global, factory) {<br>    <blue> typeof &nbsp</blue><orange>exports&nbsp</orange>=== 'object' && <blue> typeof &nbsp</blue><green> module&nbsp</green>!== <green>'undefined'&nbsp</green>? factory( <orange>exports&nbsp</orange>, <orange>require&nbsp</orange>('os'), <orange>require&nbsp</orange>('http'), <orange>require&nbsp</orange>('https')) :<br>    <blue> typeof &nbsp</blue>define === <green> 'function'&nbsp</green>&& define.amd ? define(['exports', 'os', 'http', 'https'], factory) :<br>    (global = <blue> typeof &nbsp</blue>globalThis !== <green>'undefined'&nbsp</green>? globalThis : global || self, factory((global.ns_ = global.ns_ || {}, global.ns_.Bundle = {}), global.require$$0, global.require$$1, global.require$$2));<br>})( <green>this&nbsp</green>, (<blue>function&nbsp</blue>(<orange>exports&nbsp</orange>, <orange>require&nbsp</orange>$$0, <orange>require&nbsp</orange>$$1, <orange>require&nbsp</orange>$$2) { 'use strict';<br><br>// ...<br><br>// Pseudo-code<br><blue>if&nbsp</blue>(node) {<br>  <orange>const&nbsp</orange>os = <orange>require&nbsp</orange>('os');<br>  //...<br>}</code><br><br>The bundler has replaced my require('os') statements with require$$0 so it isn't calling the <orange>require&nbsp</orange>statements conditionally as I would have expected. They have been pre-called (hoisted). Any way <blue>for&nbsp</blue>Rollup to not do hoisting of that?",
            "user": "GuidoG",
            "created_at": "2022/12/23",
            "modified_at": "2022/12/23"
        },
        {
            "id": 2,
            "user_id": 2,
            "questions_id": 2,
            "votes": 0,
            "content": "22 I am building an UMD library that is meant to be used only in browsers. However, it has a dependency on another UMD library/module/bundle .js file which contains <orange>require&nbsp</orange>statements <blue>for&nbsp</blue>nodejs modules. The statements aren't run always, but only <blue>if&nbsp</blue>that sub-library detects it's running in NodeJS. For context, the required nodejs modules are os, http and https but they are all required dynamically.<br><br>My rollup.config.js is already using the @rollup/plugin-node-resolve, @rollup/plugin-commonjs and @rollup/plugin-typescript. But when building it triggers some warnings.<br><br><code>(<blue>function&nbsp</blue>(global, factory) {<br>    <blue> typeof &nbsp</blue><orange>exports&nbsp</orange>=== 'object' && <blue> typeof &nbsp</blue><green> module&nbsp</green>!== <green>'undefined'&nbsp</green>? factory( <orange>exports&nbsp</orange>, <orange>require&nbsp</orange>('os'), <orange>require&nbsp</orange>('http'), <orange>require&nbsp</orange>('https')) :<br>    <blue> typeof &nbsp</blue>define === <green> 'function'&nbsp</green>&& define.amd ? define(['exports', 'os', 'http', 'https'], factory) :<br>    (global = <blue> typeof &nbsp</blue>globalThis !== <green>'undefined'&nbsp</green>? globalThis : global || self, factory((global.ns_ = global.ns_ || {}, global.ns_.Bundle = {}), global.require$$0, global.require$$1, global.require$$2));<br>})( <green>this&nbsp</green>, (<blue>function&nbsp</blue>(<orange>exports&nbsp</orange>, <orange>require&nbsp</orange>$$0, <orange>require&nbsp</orange>$$1, <orange>require&nbsp</orange>$$2) { 'use strict';<br><br>// ...<br><br>// Pseudo-code<br><blue>if&nbsp</blue>(node) {<br>  <orange>const&nbsp</orange>os = <orange>require&nbsp</orange>('os');<br>  //...<br>}</code><br><br>The bundler has replaced my require('os') statements with require$$0 so it isn't calling the <orange>require&nbsp</orange>statements conditionally as I would have expected. They have been pre-called (hoisted). Any way <blue>for&nbsp</blue>Rollup to not do hoisting of that?",
            "user": "MaGaroo",
            "created_at": "2222/22/22",
            "modified_at": "2222/22/22"
        }
    ]
}
